#!/bin/bash

set -e

. /usr/share/debconf/confmodule

if [ -n "$DEBIAN_SCRIPT_DEBUG" ]; then set -v -x; DEBIAN_SCRIPT_TRACE=1; fi
${DEBIAN_SCRIPT_TRACE:+ echo "#42#DEBUG# RUNNING $0 $*" 1>&2 }
 
export PATH=$PATH:/sbin:/usr/sbin:/bin:/usr/bin

invoke() {
  if [ -x /usr/sbin/invoke-rc.d ]; then
    invoke-rc.d mysql-ndb-mgm $1
  else
    /etc/init.d/mysql-ndb-mgm $1
  fi
}

# This is necessary because mysql_install_db removes the pid file in /var/run
# and because changed configuration options should take effect immediately.
# In case the server wasn't running at all it should be ok if the stop
# script fails. I can't tell at this point because of the cleaned /var/run.
set +e; invoke stop; set -e
    
case "$1" in
  configure)
    mysql_statedir=/var/lib/mysql-cluster-mgmt
    mysql_cfgdir=/etc/mysql
    mysql_upgradedir=/var/lib/mysql-cluster-mgmt-upgrade

    # first things first, if the following symlink exists, it is a preserved
    # copy the old data dir from a mysql upgrade that would have otherwise
    # been replaced by an empty mysql dir.  this should restore it.
    dir=DATADIR
    targetdir=$mysql_statedir
    savelink="$mysql_upgradedir/$dir.link"
    if [ -L "$savelink" ]; then
        # If the targetdir was a symlink before we upgraded it is supposed
        # to be either still be present or not existing anymore now.
        if [ -L "$targetdir" ]; then
            rm "$savelink"
        elif [ ! -d "$targetdir" ]; then
            mv "$savelink" "$targetdir"
        else
            # this should never even happen, but just in case...
            mysql_tmp=`mktemp -d -t mysql-symlink-restore-XXXXXX`
            echo "this is very strange!  see $mysql_tmp/README..." >&2
            mv "$targetdir" "$mysql_tmp"
            cat << EOF > "$mysql_tmp/README"

if you're reading this, it's most likely because you had replaced
/var/lib/mysql-cluster-mgmt with a symlink, then upgraded to a new version of
mysql, and then dpkg removed your symlink (see #182747 and others).  the
mysql-cluster packages noticed that this happened, and as a workaround have
restored it. however, because /var/lib/mysql-cluster-mgmt seems to have been
re-created in the meantime, and because we don't want to rm -rf something we
don't know as much about, we're going to leave this unexpected directory here.
if your database looks normal, and this is not a symlink to your database, you
should be able to blow this all away.

EOF
        fi
    fi
    rmdir $mysql_upgradedir 2>/dev/null || true
    
    # Ensure the existence and right permissions for the database files.
    if [ ! -d "$mysql_statedir" -a ! -L "$mysql_statedir" ]; then mkdir "$mysql_statedir"; fi
    # When creating an ext3 jounal on an already mounted filesystem like e.g.
    # /var/lib/mysqlcluster, you get a .journal file that is not modifyable by chown.
    set +e
    chown -R mysql $mysql_statedir
    set -e

  ;;

  abort-upgrade|abort-remove|abort-configure)
  ;;

  *)
    echo "postinst called with unknown argument '$1'" 1>&2
    exit 1
  ;;
esac

db_stop # in case invoke failes

#DEBHELPER#

exit 0
